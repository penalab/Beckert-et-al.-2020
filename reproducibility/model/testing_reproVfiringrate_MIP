# -*- coding: utf-8 -*-
"""
Created on Mon Oct 15 13:23:59 2018

@author: penalab
"""

#%% some importing
import brian2 as br
import numpy as np
import itertools
import reproducibility_support_functions as repro

# Set some parameters
timeStepS = 0.001 * br.second
spikesPerS = 50
dur = 1.000 * br.second
times = np.arange(0,  dur, timeStepS)
reps = 100
#cw_list = (0.000010, 0.000050, 0.000100, 0.000500, 0.001000) * br.second
cw_list = (0.000500, 0.001000) * br.second
gamma_list = np.arange(0.01, 1.02, 0.2)

psthbin = 2 * br.usecond
mw_time = 0.02 * br.second

# Output variables
results_b = []
results_j = []
key = []
curve_b = []
curve_j = []
times_spikes = []
times_y = []
rates = []

# Generate the original spike train wg(t)
vt = np.random.rand(len(times))
spikes = (spikesPerS * timeStepS) / br.second > vt
spikes = np.array([float(i) * timeStepS for i, x in enumerate(spikes) if x])
spikes = spikes * br.second

for cw, gamma in itertools.product(cw_list, gamma_list):
    
    print(cw, gamma)
    key.append((cw, gamma))
    spikes_thin = []
    
    for r in range(reps):
        
        vt = np.random.rand(len(spikes))
        idx_thin = gamma > vt
        idx_thin = [i for i, x in enumerate(idx_thin) if x]
        spikes_thin.append(spikes[idx_thin])
    
    y = repro.make_y(spikes_thin)
    
    rate = np.mean([len(i) for i in spikes_thin])
    spikes_flat = [j for i in spikes_thin for j in i]

    PSTH = repro.make_PSTH(spikes_flat, dur, cw, reps)
    
    try:
        t, SAC = repro.autocor(PSTH, reps, T = mw_time, bin = cw)
        SAC = SAC * (br.Hz ** 2)
        
        SACcurve_b, strength_b = repro.brettenorm(SAC, np.mean(PSTH), cw)
        SACcurve_j, strength_j = repro.jorisnorm(SAC, reps, np.mean(PSTH), dur, cw)
        
    except:
        strength_b = None
        SACcurve_b = None
        strength_j = None
        SACcurve_j = None
        pass
    
    times_spikes.append([spikes_thin])
    times_y.append([y])
    results_b.append(strength_b)
    curve_b.append(SACcurve_b)  
    results_j.append(strength_j)
    curve_j.append(SACcurve_j) 
    rates.append(np.mean(PSTH))

np.savez('testing_results_MIP', 
         results_b = results_b,
         results_j = results_j,
         key = key, 
         curve_b = curve_b,
         curve_j = curve_j,
         times_spikes = times_spikes,
         times_y = times_y,
         rates = rates)